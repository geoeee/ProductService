// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "ProductService/openapi/gen/productservice/models"
)

// GetAPIV1ProductsOKCode is the HTTP code returned for type GetAPIV1ProductsOK
const GetAPIV1ProductsOKCode int = 200

/*GetAPIV1ProductsOK Status 200

swagger:response getApiV1ProductsOK
*/
type GetAPIV1ProductsOK struct {

	/*
	  In: Body
	*/
	Payload *models.PageProducts `json:"body,omitempty"`
}

// NewGetAPIV1ProductsOK creates GetAPIV1ProductsOK with default headers values
func NewGetAPIV1ProductsOK() *GetAPIV1ProductsOK {

	return &GetAPIV1ProductsOK{}
}

// WithPayload adds the payload to the get Api v1 products o k response
func (o *GetAPIV1ProductsOK) WithPayload(payload *models.PageProducts) *GetAPIV1ProductsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Api v1 products o k response
func (o *GetAPIV1ProductsOK) SetPayload(payload *models.PageProducts) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAPIV1ProductsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAPIV1ProductsBadRequestCode is the HTTP code returned for type GetAPIV1ProductsBadRequest
const GetAPIV1ProductsBadRequestCode int = 400

/*GetAPIV1ProductsBadRequest Status 400

swagger:response getApiV1ProductsBadRequest
*/
type GetAPIV1ProductsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAPIV1ProductsBadRequest creates GetAPIV1ProductsBadRequest with default headers values
func NewGetAPIV1ProductsBadRequest() *GetAPIV1ProductsBadRequest {

	return &GetAPIV1ProductsBadRequest{}
}

// WithPayload adds the payload to the get Api v1 products bad request response
func (o *GetAPIV1ProductsBadRequest) WithPayload(payload *models.Error) *GetAPIV1ProductsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Api v1 products bad request response
func (o *GetAPIV1ProductsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAPIV1ProductsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAPIV1ProductsInternalServerErrorCode is the HTTP code returned for type GetAPIV1ProductsInternalServerError
const GetAPIV1ProductsInternalServerErrorCode int = 500

/*GetAPIV1ProductsInternalServerError Status 500

swagger:response getApiV1ProductsInternalServerError
*/
type GetAPIV1ProductsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAPIV1ProductsInternalServerError creates GetAPIV1ProductsInternalServerError with default headers values
func NewGetAPIV1ProductsInternalServerError() *GetAPIV1ProductsInternalServerError {

	return &GetAPIV1ProductsInternalServerError{}
}

// WithPayload adds the payload to the get Api v1 products internal server error response
func (o *GetAPIV1ProductsInternalServerError) WithPayload(payload *models.Error) *GetAPIV1ProductsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Api v1 products internal server error response
func (o *GetAPIV1ProductsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAPIV1ProductsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
