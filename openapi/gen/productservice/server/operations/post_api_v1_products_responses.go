// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "ProductService/openapi/gen/productservice/models"
)

// PostAPIV1ProductsCreatedCode is the HTTP code returned for type PostAPIV1ProductsCreated
const PostAPIV1ProductsCreatedCode int = 201

/*PostAPIV1ProductsCreated Status 201

swagger:response postApiV1ProductsCreated
*/
type PostAPIV1ProductsCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Product `json:"body,omitempty"`
}

// NewPostAPIV1ProductsCreated creates PostAPIV1ProductsCreated with default headers values
func NewPostAPIV1ProductsCreated() *PostAPIV1ProductsCreated {

	return &PostAPIV1ProductsCreated{}
}

// WithPayload adds the payload to the post Api v1 products created response
func (o *PostAPIV1ProductsCreated) WithPayload(payload *models.Product) *PostAPIV1ProductsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Api v1 products created response
func (o *PostAPIV1ProductsCreated) SetPayload(payload *models.Product) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAPIV1ProductsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAPIV1ProductsBadRequestCode is the HTTP code returned for type PostAPIV1ProductsBadRequest
const PostAPIV1ProductsBadRequestCode int = 400

/*PostAPIV1ProductsBadRequest Status 400

swagger:response postApiV1ProductsBadRequest
*/
type PostAPIV1ProductsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostAPIV1ProductsBadRequest creates PostAPIV1ProductsBadRequest with default headers values
func NewPostAPIV1ProductsBadRequest() *PostAPIV1ProductsBadRequest {

	return &PostAPIV1ProductsBadRequest{}
}

// WithPayload adds the payload to the post Api v1 products bad request response
func (o *PostAPIV1ProductsBadRequest) WithPayload(payload *models.Error) *PostAPIV1ProductsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Api v1 products bad request response
func (o *PostAPIV1ProductsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAPIV1ProductsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAPIV1ProductsInternalServerErrorCode is the HTTP code returned for type PostAPIV1ProductsInternalServerError
const PostAPIV1ProductsInternalServerErrorCode int = 500

/*PostAPIV1ProductsInternalServerError Status 500

swagger:response postApiV1ProductsInternalServerError
*/
type PostAPIV1ProductsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostAPIV1ProductsInternalServerError creates PostAPIV1ProductsInternalServerError with default headers values
func NewPostAPIV1ProductsInternalServerError() *PostAPIV1ProductsInternalServerError {

	return &PostAPIV1ProductsInternalServerError{}
}

// WithPayload adds the payload to the post Api v1 products internal server error response
func (o *PostAPIV1ProductsInternalServerError) WithPayload(payload *models.Error) *PostAPIV1ProductsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Api v1 products internal server error response
func (o *PostAPIV1ProductsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAPIV1ProductsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
